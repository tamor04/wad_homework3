
Detailed information about the App:

The Front-end (Vue.js) App should offer the following “pages”

        DONE            a. The home page (details will follow about its content) should be protected, i.e., only
                        authenticated users can reach/access it.

        DONE            b. A contact us “page” (not protected) that contains just basic contact us information.
                        Note: you can simply change the “About page” (created by Vue.js) to the “Contacts
                        page”.

        DONE            c. A signup “page” that allows a user to register by providing her email and password. The
                        signup “page” should look close enough to Figure 1a (2 points).

        DONE            d. A login “page” that allows a registered user to login by providing her email and
                        password. The login “page” should contain a button that, when pressed, should
                        redirect the user to the signup “page”. The login “page” should look close enough to
                        Figure 1b (2 points).

                        Note: The points for (c and d) are assigned based on the provided functionalities. For example,
                        you get two points for “c” if your signup “page” sends the credentials (email and password) of
                        the user to the server, and the server checks if such a user exists. If not, it will insert the
                        credentials in the database. Then, create a JWT and return it to the client.





The home “page” should:

        DONE            a. Automatically fetches and presents all posts from the database (1 point);

        DONE            b. Each listed post should be clickable and when clicked, it should redirect you to “a post”
                        page (details about the content of this page will follow) - (0.5 points).

        DONE            c. includes a “logout” button that, when clicked, will logout the user and redirect her to
                        the login page (1 point).

        DONE            d. includes an “add post” button that, when clicked, will redirect the user to the add post
                        “page” (details about the content of this page will follow) (0.5 points).

        DONE            e. includes a “delete all” button, that when clicked will delete all the posts from the
                        database (2 points).

        DONE            The home page should look close enough to Figure 2





DONE            The add post “page” should allow only a logged-in user to add a post, and it should look close
                enough to Figure 3 (2 points).


DONE            Note: you are adding only the body of the post through the add post “page”, but a post has a
                date too (check Figure 2).


The a post “page” should fetch and present a specific post (the one clicked on in the
homepage) from the database (1 point), and it should contain two buttons:

        a. update, when pressed on, will update the post in the database (1 point); and

        DONE        b. deletes, when pressed on, will delete the post from the database (1 point).

        DONE        The a post “page” should look close enough to Figure 4.

        DONE            Note: if a user is not logged in, she should not be allowed to reach/access “a post” or “add
                        post” “pages” (1 point).




Important notes:

Back-end:
        DONE?           Your back-end will be working as an end-point (we will be dealing only with JSON data format,
                        no static files (e.g., images)). Your back-end should be able to handle all required CRUD
                        operation requests coming from the front-end.

Security:
        DONE            You can only use JWT-related techniques for the authentication in your App.

Database:
        DONE            Any table required for your App should be created automatically when you run your back-end App just like we did in week 12 and week 13.
